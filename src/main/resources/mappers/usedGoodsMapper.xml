<?xml version="1.0" encoding="UTF-8"?>

<!-- xml은 html과 똑같이 마크업 언어이다. 태그를 통해서 표현해주는 것이다 html은 태그를 통해서 화면을 구성하는 용도로 사용하는 거고 xml은 데이터를 표현하기 위해 사용하는 문법이다. -->
<!-- dtd : xml에서 사용된 태그를 정의한 문서 -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
 
 <!-- 해당 인터페이스와 연결시키기 -->
 <mapper namespace="com.jinju.spring.ex.database.repository.UsedGoodsRepository">
 	
 	<!-- id : 메소드 이름 resultType : return 타입 명시( 리스트 정보는 표현 할 필요 없고 한 행의 정보를 저장 할 객체가 어떤건지를 명시하면 됨 )-->
 	<select id="selectUsedGoodsList" 
 	resultType="com.jinju.spring.ex.database.domain.UsedGoods">
 		SELECT
 			`id`
 			,`sellerId`
 			,`title`
 			,`price`
 			,`description`
 			,`image`
 			,`createdAt`
 			,`updatedAt` 
 		FROM 
 			`used_goods`
 	</select>
 	
 </mapper>
 
 <!--
 	mybatis 라는 놈이 이게 어떻게 동작을 시켜주냐면 selectUsedGoodsList 이 메소드가 호출이 되면 Mapper 라는 어노테이션에 의해 xml에서 UsedGoodsRepository와 연결된 
 	xml을 찾아냅니다. 그리고 나서 그 안에 있는 selectUsedGoodsList 이 메소드와 연결된 태그를 찾아내고 쿼리를 수행시키고 쿼리를 다 수행시키면 조회 결과가 나온다.
 	서블릿에서는 ResultSet을 통해서 조회 결과를 확인했는데 여기서는 우리가 이해하기 쉬운 객체로 리턴해서 만들어준다. 어떻게 만들어줄까? 한 행의 정보를 저장한 클래스를 직접 mybatis
 	내부에서 객체 생성을 해준다. 객체 생성을 해서 해당하는 행의 들어 있는 값을, 일치하는 컬럼 이름에 들어 있는 값을 해당하는 멤버 변수에 알아서 setter 통해서 다 저장함
 	결국 조회 결과에 한 행 정보를 mybatis가 직접 객체 생성해서 직접 값까지 채워준다. 이걸 모든 행을 대상으로 5개가 객체로 만들어 질 것이다.
 	조회 결과가 여러 개의 행이면 이 객체들을 리스트에 저장해서 리턴해준다. 
 	
 	어딘가에서 selectUsedGoodsList이 메소드를 호출을 하면 쿼리 수행 하고 select 쿼리인 경우 쿼리 수행 결과로 나오는 조회된 결과를 resultType에 있는 
 	com.jinju.spring.ex.database.domain.UsedGoods 이 클래스로 객체 생성을 해서 매칭이 되는 컬럼의 값들을 저장을 하고 여러 행인 경우 각각의 행을 모두 서로 다른 객체로 만든 다음에
 	리스트로 저장해서 하나로 묶인 리스트 객체를 리턴해준다.
  -->
 